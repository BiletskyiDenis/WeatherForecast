// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WeatherForecastData;

namespace WeatherForecastData.Migrations
{
    [DbContext(typeof(WeatherForecastContext))]
    [Migration("20171002065819_initialize migrations")]
    partial class initializemigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherForecastData.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.Property<int>("CityWeatherId");

                    b.Property<string>("Country");

                    b.Property<DateTime>("UpateTime");

                    b.Property<int?>("UserDataId");

                    b.HasKey("CityId");

                    b.HasIndex("UserDataId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherForecastData.Models.CurrentDayWeather", b =>
                {
                    b.Property<int>("CurrentDayWeatherId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<long>("DateTime");

                    b.Property<string>("Description");

                    b.Property<float>("Humidity");

                    b.Property<string>("Icon");

                    b.Property<int>("InnerWeatherId");

                    b.Property<string>("Main");

                    b.Property<int>("Pressure");

                    b.Property<long>("Sunrise");

                    b.Property<long>("Sunset");

                    b.Property<float>("Temp");

                    b.Property<float>("TempMax");

                    b.Property<float>("TempMin");

                    b.Property<float>("WindDeg");

                    b.Property<string>("WindSpeed");

                    b.HasKey("CurrentDayWeatherId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("CurrentDayWeathers");
                });

            modelBuilder.Entity("WeatherForecastData.Models.HourlyDaysWeather", b =>
                {
                    b.Property<int>("HourlyDaysWeatherId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<long>("DateTime");

                    b.Property<string>("Description");

                    b.Property<float>("Humidity");

                    b.Property<string>("Icon");

                    b.Property<int>("InnerWeatherId");

                    b.Property<string>("Main");

                    b.Property<int>("Pressure");

                    b.Property<float>("Temp");

                    b.Property<float>("TempMax");

                    b.Property<float>("TempMin");

                    b.Property<float>("WindDeg");

                    b.Property<string>("WindSpeed");

                    b.HasKey("HourlyDaysWeatherId");

                    b.HasIndex("CityId");

                    b.ToTable("HourlyDaysWeathers");
                });

            modelBuilder.Entity("WeatherForecastData.Models.UserData", b =>
                {
                    b.Property<int>("UserDataId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("SelectedId");

                    b.HasKey("UserDataId");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("WeatherForecastData.Models.WeekWeather", b =>
                {
                    b.Property<int>("WeekWeatherId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<long>("DateTime");

                    b.Property<string>("Description");

                    b.Property<float>("Humidity");

                    b.Property<string>("Icon");

                    b.Property<int>("InnerWeatherId");

                    b.Property<string>("Main");

                    b.Property<int>("Pressure");

                    b.Property<float>("Temp");

                    b.Property<float>("TempEve");

                    b.Property<float>("TempMax");

                    b.Property<float>("TempMin");

                    b.Property<float>("TempMorn");

                    b.Property<float>("TempNight");

                    b.Property<float>("WindDeg");

                    b.Property<string>("WindSpeed");

                    b.HasKey("WeekWeatherId");

                    b.HasIndex("CityId");

                    b.ToTable("WeekWeather");
                });

            modelBuilder.Entity("WeatherForecastData.Models.City", b =>
                {
                    b.HasOne("WeatherForecastData.Models.UserData", "UserData")
                        .WithMany("Cities")
                        .HasForeignKey("UserDataId");
                });

            modelBuilder.Entity("WeatherForecastData.Models.CurrentDayWeather", b =>
                {
                    b.HasOne("WeatherForecastData.Models.City", "City")
                        .WithOne("CurrentDay")
                        .HasForeignKey("WeatherForecastData.Models.CurrentDayWeather", "CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherForecastData.Models.HourlyDaysWeather", b =>
                {
                    b.HasOne("WeatherForecastData.Models.City", "City")
                        .WithMany("DaysOfHourly")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WeatherForecastData.Models.WeekWeather", b =>
                {
                    b.HasOne("WeatherForecastData.Models.City", "City")
                        .WithMany("DaysOfWeek")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
